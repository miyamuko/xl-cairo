(handler-case
    (require "drive-info")
  (error (e)
    (msgbox "examples/drive-info.l を動かすには drive-info が必要です。~%NetInstaller でインストールできます。")
    (error e)))

(defun draw-drive-space (cr drive free-bytes% used-bytes%)
  (let* ((2pi (* pi 2))
         (free-radian (* (/ free-bytes% 100) 2pi))
         (90rad (* 90/360 2pi))
         (xc 0.5)
         (yc 0.4)
         (radius 0.35))
    (flet ((set-gradation (cr r g b)
             (with-cairo-pattern (pat (cairo-pattern-create-linear 0 0 1 1))
               (cairo-pattern-add-color-stop-rgb pat 0 1 1 1)
               (cairo-pattern-add-color-stop-rgb pat 1 r g b)
               (cairo-set-source cr pat))))
      (cairo-new-path cr)
      (cairo-set-line-width cr 0.02)
      (cairo-set-source-rgb cr 0 0 0)
      (with-cairo-stroke-preserve (cr)
        (cairo-arc cr xc yc radius (- 0 90rad) (- free-radian 90rad))
        (cairo-line-to cr xc yc)
        (cairo-close-path cr))
      (with-cairo-save (cr)
        (set-gradation cr 1 0 1)
        (cairo-fill cr))
      (with-cairo-stroke-preserve (cr)
        (cairo-arc cr xc yc radius (- free-radian 90rad) (- 0 90rad))
        (cairo-line-to cr xc yc)
        (cairo-close-path cr))
      (with-cairo-save (cr)
        (set-gradation cr 0 0 1)
        (cairo-fill cr))
      (with-cairo-save (cr)
        (cairo-set-font-size cr 0.05)
        (cairo-move-to cr 0.2 0.9)
        (with-cairo-font-face (face (cairo-win32-font-face-create "MS UI ゴシック"))
          (cairo-set-font-face cr face))
        (cairo-show-text cr (format nil "~A: ドライブの空き領域: ~,1F%" drive free-bytes%)))
      )))

(load "_runner.l")
(do-snippets (:width 600 :height 600)
  (labels ((x (alist &rest path)
             (reduce #'(lambda (node path)
                         (or (cdr (assoc path node))
                             (return-from x)))
                     path
                     :initial-value alist)))
    (let ((drives (remove-if-not #'(lambda (info)
                                     (x info :space))
                                 (mapcar #'drive:get-drive-info
                                         (drive:get-logical-drives)))))
      (let* ((len (length drives))
             (nxn (float (ceiling (sqrt len))))
             (i 0))
        (dotimes (y nxn)
          (dotimes (x nxn)
            (unless (< i len) (return))
            (let ((info (nth i drives)))
              (when info
                (with-cairo-save (cr)
                  (cairo-translate cr (/ x nxn) (/ y nxn))
                  (cairo-scale cr (/ 1 nxn) (/ 1 nxn))
                  (draw-drive-space
                   cr
                   (drive:drive-letter (x info :drive :name))
                   (x info :space :free-bytes%)
                   (x info :space :used-bytes%))))
              (incf i))))))))
